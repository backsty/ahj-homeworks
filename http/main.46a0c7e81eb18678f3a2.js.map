{"version":3,"file":"main.46a0c7e81eb18678f3a2.js","mappings":"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","sources":["webpack://helpdesk-system/./src/frontend/js/api.js","webpack://helpdesk-system/./src/frontend/js/Modal.js","webpack://helpdesk-system/./src/frontend/js/TicketView.js","webpack://helpdesk-system/./src/frontend/js/StateManager.js","webpack://helpdesk-system/./src/index.js","webpack://helpdesk-system/./src/frontend/js/app.js"],"sourcesContent":["export default class TicketApi {\n  constructor() {\n    this.baseUrl = 'https://ahj-backend.herokuapp.com/tickets';\n  }\n\n  async fetchWithConfig(url, options = {}) {\n    const defaultOptions = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      mode: 'cors',\n      credentials: 'include'\n    };\n\n    try {\n      const response = await fetch(url, { ...defaultOptions, ...options });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    } catch (error) {\n      console.error(`API Error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  async getAllTickets() {\n    try {\n      return await this.fetchWithConfig(`${this.baseUrl}?method=allTickets`);\n    } catch (error) {\n      console.error('Failed to fetch tickets:', error);\n      return [];\n    }\n  }\n\n  async getTicketById(id) {\n    return this.fetchWithConfig(`${this.baseUrl}?method=ticketById&id=${id}`);\n  }\n\n  async createTicket(data) {\n    return this.fetchWithConfig(`${this.baseUrl}?method=createTicket`, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    });\n  }\n\n  async updateTicket(id, data) {\n    return this.fetchWithConfig(`${this.baseUrl}?method=updateTicket&id=${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(data)\n    });\n  }\n\n  async deleteTicket(id) {\n    return this.fetchWithConfig(`${this.baseUrl}?method=deleteTicket&id=${id}`, {\n      method: 'DELETE'\n    });\n  }\n};","export default class Modal {\n  constructor() {\n    this.modal = document.createElement('div');\n    this.modal.className = 'modal';\n    this.modal.innerHTML = `\n        <div class=\"modal-content\">\n            <button type=\"button\" class=\"close-btn\" aria-label=\"Закрыть\">\n                <svg class=\"icon\" viewBox=\"0 -960 960 960\">\n                    <path d=\"M256-213.847 213.847-256l224-224-224-224L256-746.153l224 224 224-224L746.153-704l-224 224 224 224L704-213.847l-224-224-224 224Z\"/>\n                </svg>\n            </button>\n            <div class=\"modal-body\"></div>\n        </div>\n    `;\n    document.body.appendChild(this.modal);\n\n    this.closeBtn = this.modal.querySelector('.close-btn');\n    this.modalBody = this.modal.querySelector('.modal-body');\n\n    if (this.closeBtn) {\n      this.closeBtn.addEventListener('click', () => this.close());\n    }\n  }\n\n  show(content) {\n    this.modal.classList.add('active');\n    this.modalBody.innerHTML = content;\n  }\n\n  close() {\n    this.modal.classList.remove('active');\n    setTimeout(() => {\n      this.modalBody.innerHTML = '';\n    }, 300);\n  }\n};","export default class TicketView {\n    constructor(container) {\n        this.container = container;\n        this.tickets = [];\n        this.addEventListeners();\n    }\n\n    renderTickets(tickets) {\n        this.tickets = tickets;\n        this.container.innerHTML = tickets.map(ticket => this.createTicketHTML(ticket)).join('');\n    }\n\n    addEventListeners() {\n        this.container.addEventListener('click', (event) => {\n            // event.preventDefault();\n            const ticket = event.target.closest('.ticket');\n            if (!ticket) return;\n\n            const id = ticket.dataset.id;\n            const target = event.target.closest('button, .status-checkbox, label');\n\n            if (target) {\n                if (target.classList.contains('edit-btn')) {\n                    event.preventDefault();\n                    this.onEditClick?.(id);\n                } else if (target.classList.contains('delete-btn')) {\n                    event.preventDefault();\n                    this.onDeleteClick?.(id);\n                } else if (target.classList.contains('status-checkbox') || target.getAttribute('for')?.startsWith('status-')) {\n                    this.onStatusChange?.(id);\n                }\n            } else if (event.target.closest('.ticket-content')) {\n                event.preventDefault();\n                this.onTicketClick?.(id);\n            }\n        });\n    }\n\n    createTicketHTML(ticket) {\n        const checkboxIcon = ticket.status \n            ? '<path d=\"M382-240 154-468l57-57 171 171 367-367 57 57-424 424Z\"/>'\n            : '<path d=\"M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h560q33 0 56.5 23.5T840-760v560q0 33-23.5 56.5T760-120H200Zm0-80h560v-560H200v560Z\"/>';\n\n        return `\n            <div class=\"ticket\" data-id=\"${ticket.id}\">\n                <div class=\"ticket-status\">\n                    <input type=\"checkbox\" \n                           class=\"status-checkbox\" \n                           id=\"status-${ticket.id}\" \n                           ${ticket.status ? 'checked' : ''}>\n                    <label for=\"status-${ticket.id}\">\n                        <svg class=\"icon\" viewBox=\"0 -960 960 960\">\n                            ${checkboxIcon}\n                        </svg>\n                    </label>\n                </div>\n                <div class=\"ticket-content\">\n                    <h3>${ticket.name}</h3>\n                    <p>Created: ${new Date(ticket.created).toLocaleString()}</p>\n                </div>\n                <div class=\"ticket-controls\">\n                    <button class=\"edit-btn\" title=\"Редактировать\">\n                        <svg class=\"icon\" viewBox=\"0 -960 960 960\">\n                            <path d=\"M200-200h57l391-391-57-57-391 391v57Zm-80 80v-170l528-527q12-11 26.5-17t30.5-6q16 0 31 6t26 18l55 56q12 11 17.5 26t5.5 30q0 16-5.5 30.5T817-647L290-120H120Z\"/>\n                        </svg>\n                    </button>\n                    <button class=\"delete-btn\" title=\"Удалить\">\n                        <svg class=\"icon\" viewBox=\"0 -960 960 960\">\n                            <path d=\"M280-120q-33 0-56.5-23.5T200-200v-520h-40v-80h200v-40h240v40h200v80h-40v520q0 33-23.5 56.5T680-120H280Z\"/>\n                        </svg>\n                    </button>\n                </div>\n            </div>\n        `;\n    }\n};","export default class StateManager {\n    constructor() {\n        this.storageKey =  'helpdesk_state';\n    }\n\n    saveState(tickets) {\n        try {\n            localStorage.setItem(this.storageKey, JSON.stringify(tickets));\n        } catch (error) {\n            console.error('Failed to save state:', error);\n        }\n    }\n\n    loadState() {\n        try {\n            const state = localStorage.getItem(this.storageKey);\n            return state ? JSON.parse(state) : [];\n        } catch (error) {\n            console.error('Error loading state:', error);\n        }\n    }\n\n    clearState() {\n        localStorage.removeItem(this.storageKey);\n    }\n};","import './frontend/css/style.css';\nimport App from './frontend/js/app.js';\n\nconst app = new App();\napp.init();\n","import API from './api.js';\nimport Modal from './Modal.js';\nimport TicketView from './TicketView.js';\nimport StateManager from './StateManager.js';\n\nexport default class App {\n    constructor() {\n        this.api = new API();\n        this.modal = new Modal();\n        this.ticketView = new TicketView(document.querySelector('.container'));\n        this.stateManager = new StateManager();\n\n        document.addEventListener('DOMContentLoaded', () => {\n            this.addTicketBtn = document.querySelector('.add-ticket');\n            if (this.addTicketBtn) {\n                this.registerEvents();\n                this.init();\n            } else {\n                console.error('Add ticket button not found');\n            }\n        });\n    }\n\n    async init() {\n        try {\n            const savedTickets = this.stateManager.loadState();\n            if (savedTickets.length > 0) {\n                this.ticketView.renderTickets(savedTickets);\n            }\n            await this.loadTickets();\n        } catch (error) {\n            console.error('Error initializing app:', error);\n        }\n    }\n\n    registerEvents() {\n        this.addTicketBtn.addEventListener('click', () => this.showCreateTicketModal());\n        this.ticketView.onTicketClick = (id) => this.showTicketDetails(id);\n        this.ticketView.onEditClick = (id) => this.showEditTicketModal(id);\n        this.ticketView.onDeleteClick = (id) => this.showDeleteConfirmation(id);\n        this.ticketView.onStatusChange = (id) => this.toggleTicketStatus(id);\n    }\n\n    async loadTickets() {\n        try {\n            this.showLoading();\n            const tickets = await this.api.getAllTickets();\n            this.ticketView.renderTickets(tickets);\n            this.stateManager.saveState(tickets);\n        } catch (error) {\n            console.error('Error loading tickets', error);\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    showLoading() {\n        if (document.querySelector('.loading')) return;\n\n        const loader = document.createElement('div');\n        loader.className = 'loading';\n        loader.innerHTML = `\n            <div class=\"lds-grid\">\n                <div></div><div></div><div></div>\n                <div></div><div></div><div></div>\n                <div></div><div></div><div></div>\n            </div>\n        `;\n        document.body.appendChild(loader);\n    }\n\n    hideLoading() {\n        const loader = document.querySelector('.loading');\n        if (loader) loader.remove();\n    }\n\n    showCreateTicketModal() {\n        try {\n            const content = `\n                <form id=\"create-ticket-form\" class=\"ticket-form\">\n                    <h2>Создать тикет</h2>\n                    <input type=\"text\" \n                        name=\"name\" \n                        placeholder=\"Краткое описание\" \n                        required \n                        autocomplete=\"off\">\n                    <textarea name=\"description\" \n                            placeholder=\"Подробное описание\" \n                            required \n                            autocomplete=\"off\"\n                            rows=\"3\"\n                            style=\"resize: none; min-height: 100px;\"\n                            ></textarea>\n                    <div class=\"form-buttons\">\n                        <button type=\"submit\">Создать</button>\n                        <button type=\"button\" class=\"cancel-btn\">Отмена</button>\n                    </div>\n                </form>\n            `;\n            this.modal.show(content);\n\n            const textarea = document.querySelector('textarea[name=\"description\"]');\n            const adjustHeight = () => {\n                textarea.style.height = '100px';\n                textarea.style.height = textarea.scrollHeight + 'px';\n            };\n\n            textarea.addEventListener('input', () => {\n                adjustHeight();\n                textarea.value = textarea.value.replace(/\\n\\s*\\n/g, '\\n');\n            });\n\n            textarea.addEventListener('keydown', (e) => {\n                if (e.key === 'Enter') {\n                    setTimeout(adjustHeight, 0);\n                }\n            });\n\n            adjustHeight();\n\n            const form = document.getElementById('create-ticket-form');\n            const handleSubmit = async (e) => {\n                e.preventDefault();\n                try {\n                    const formData = new FormData(e.target);\n                    await this.createTicket({\n                        name: formData.get('name'),\n                        description: formData.get('description'),\n                        status: false,\n                    });\n                } finally {\n                    form.removeEventListener('submit', handleSubmit);\n                }\n            };\n\n            form.addEventListener('submit', handleSubmit);\n            form.querySelector('.cancel-btn').addEventListener('click', () => {\n                form.reset();\n                this.modal.close();\n            });\n        } catch (error) {\n            console.error('Error in create modal:', error);\n            this.modal.close();\n        }\n    }\n\n    async createTicket(ticket) {\n        try {\n            this.showLoading();\n            await this.api.createTicket(ticket);\n            await this.loadTickets();\n            this.modal.close();\n        } catch (error) {\n            console.error('Error creating ticket', error);\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    async showTicketDetails(id) {\n        try {\n            this.showLoading();\n            const ticket = await this.api.getTicketById(id);\n            const content = `\n                <div class=\"ticket-details\">\n                    <h2>${ticket.name}</h2>\n                    <p>${ticket.description}</p>\n                    <p>Status: ${ticket.status ? 'Done' : 'In Progress'}</p>\n                    <p>Created: ${new Date(ticket.created).toLocaleString()}</p>\n                </div>\n            `;\n            this.modal.show(content);\n        } catch (error) {\n            console.error('Error loading ticket details', error);\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    async updateTicket(id, ticket) {\n        try {\n            this.showLoading();\n            await this.api.updateTicket(id, ticket);\n            await this.loadTickets();\n            this.modal.close();\n        } catch (error) {\n            console.error('Error updating ticket', error);\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    async showEditTicketModal(id) {\n        try {\n            this.showLoading();\n            const ticket = await this.api.getTicketById(id);\n            const content = `\n                <form id=\"edit-ticket-form\" class=\"ticket-form\">\n                    <h2>Редактировать тикет</h2>\n                    <input type=\"text\" \n                        name=\"name\" \n                        value=\"${ticket.name}\" \n                        required \n                        autocomplete=\"off\">\n                    <textarea name=\"description\" \n                            required \n                            autocomplete=\"off\"\n                            rows=\"3\"\n                            style=\"resize: none; min-height: 100px;\"\n                            >${ticket.description}</textarea>\n                    <div class=\"form-buttons\">\n                        <button type=\"submit\">Сохранить</button>\n                        <button type=\"button\" class=\"cancel-btn\">Отмена</button>\n                    </div>\n                </form>\n            `;\n            this.modal.show(content);\n            \n            const textarea = document.querySelector('textarea[name=\"description\"]');\n            const adjustHeight = () => {\n                textarea.style.height = '100px';  // Сбрасываем до минимальной высоты\n                textarea.style.height = textarea.scrollHeight + 'px';\n            };\n\n            textarea.addEventListener('input', () => {\n                adjustHeight();\n                // Убираем двойные переносы строк\n                textarea.value = textarea.value.replace(/\\n\\s*\\n/g, '\\n');\n            });\n\n            // Убираем preventDefault для Enter чтобы работал стандартный перенос\n            textarea.addEventListener('keydown', (e) => {\n                if (e.key === 'Enter') {\n                    setTimeout(adjustHeight, 0);\n                }\n            });\n\n            adjustHeight();\n\n            const form = document.getElementById('edit-ticket-form');\n            const handleSubmit = async (e) => {\n                e.preventDefault();\n                try {\n                    const formData = new FormData(e.target);\n                    await this.updateTicket(id, {\n                        name: formData.get('name'),\n                        description: formData.get('description'),\n                        status: ticket.status,\n                    });\n                } finally {\n                    form.removeEventListener('submit', handleSubmit);\n                }\n            };\n\n            form.addEventListener('submit', handleSubmit);\n            form.querySelector('.cancel-btn').addEventListener('click', () => {\n                form.reset();\n                this.modal.close();\n            });\n        } catch (error) {\n            console.error('Error loading ticket for edit', error);\n            this.modal.close();\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    showDeleteConfirmation(id) {\n        try {\n            const content = `\n                <div class=\"delete-confirmation\">\n                    <h2>Удалить тикет?</h2>\n                    <div class=\"modal-buttons\">\n                        <button id=\"confirm-delete\" class=\"danger-btn\">Да</button>\n                        <button id=\"cancel-delete\">Отмена</button>\n                    </div>\n                </div>\n            `;\n            this.modal.show(content);\n\n            const confirmBtn = document.getElementById('confirm-delete');\n            const cancelBtn = document.getElementById('cancel-delete');\n\n            const cleanup = () => {\n                confirmBtn?.removeEventListener('click', handleConfirm);\n                cancelBtn?.removeEventListener('click', handleCancel);\n            };\n\n            const handleConfirm = async () => {\n                try {\n                    this.showLoading();\n                    await this.deleteTicket(id);\n                    this.modal.close();\n                } catch (error) {\n                    console.error('Error deleting ticket:', error);\n                } finally {\n                    this.hideLoading();\n                    cleanup();\n                }\n            };\n    \n\n            const handleCancel = () => {\n                this.modal.close();\n                cleanup();\n            };\n\n            confirmBtn?.addEventListener('click', handleConfirm);\n            cancelBtn?.addEventListener('click', handleCancel);\n        } catch (error) {\n            console.error('Error in delete confirmation:', error);\n            this.modal.close();\n        }\n    }\n\n    async deleteTicket(id) {\n        try {\n            this.showLoading();\n            await this.api.deleteTicket(id);\n            await this.loadTickets();\n            this.modal.close();\n        } catch (error) {\n            console.error('Error deleting ticket', error);\n        } finally {\n            this.hideLoading();\n        }\n    }\n\n    async toggleTicketStatus(id) {\n        try {\n            if (document.querySelector('.loading')) return;\n\n            this.showLoading();\n            const ticket = await this.api.getTicketById(id);\n            if (!ticket) throw new Error('Ticket not found');\n            await this.api.updateTicket(id, { ...ticket, status: !ticket.status });\n            await this.loadTickets();\n        } catch (error) {\n            console.error('Error updating ticket status', error);\n        } finally {\n            this.hideLoading();\n        }\n    }\n};"],"names":["TicketApi","constructor","this","baseUrl","fetchWithConfig","url","options","defaultOptions","headers","mode","credentials","response","fetch","ok","Error","status","json","error","console","message","getAllTickets","getTicketById","id","createTicket","data","method","body","JSON","stringify","updateTicket","deleteTicket","Modal","modal","document","createElement","className","innerHTML","appendChild","closeBtn","querySelector","modalBody","addEventListener","close","show","content","classList","add","remove","setTimeout","TicketView","container","tickets","addEventListeners","renderTickets","map","ticket","createTicketHTML","join","event","target","closest","dataset","contains","preventDefault","onEditClick","onDeleteClick","getAttribute","startsWith","onStatusChange","onTicketClick","checkboxIcon","name","Date","created","toLocaleString","StateManager","storageKey","saveState","localStorage","setItem","loadState","state","getItem","parse","clearState","removeItem","api","API","ticketView","stateManager","addTicketBtn","registerEvents","init","savedTickets","length","loadTickets","showCreateTicketModal","showTicketDetails","showEditTicketModal","showDeleteConfirmation","toggleTicketStatus","showLoading","hideLoading","loader","textarea","adjustHeight","style","height","scrollHeight","value","replace","e","key","form","getElementById","handleSubmit","async","formData","FormData","get","description","removeEventListener","reset","confirmBtn","cancelBtn","cleanup","handleConfirm","handleCancel"],"sourceRoot":""}