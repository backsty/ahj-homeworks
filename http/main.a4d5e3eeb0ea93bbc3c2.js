(()=>{"use strict";class t{constructor(){this.baseUrl="localhost"===window.location.hostname?"http://localhost:7070/tickets":"https://ahj-backend.herokuapp.com/tickets"}async fetchWithConfig(t,e={}){const i={headers:{"Content-Type":"application/json"},mode:"cors",credentials:"include"};try{const n=await fetch(t,{...i,...e});if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);return n.json()}catch(t){throw console.error(`API Error: ${t.message}`),t}}async getAllTickets(){try{return await this.fetchWithConfig(`${this.baseUrl}?method=allTickets`)}catch(t){return console.error("Failed to fetch tickets:",t),[]}}async getTicketById(t){return this.fetchWithConfig(`${this.baseUrl}?method=ticketById&id=${t}`)}async createTicket(t){return this.fetchWithConfig(`${this.baseUrl}?method=createTicket`,{method:"POST",body:JSON.stringify(t)})}async updateTicket(t,e){return this.fetchWithConfig(`${this.baseUrl}?method=updateTicket&id=${t}`,{method:"PUT",body:JSON.stringify(e)})}async deleteTicket(t){return this.fetchWithConfig(`${this.baseUrl}?method=deleteTicket&id=${t}`,{method:"DELETE"})}}class e{constructor(){this.modal=document.createElement("div"),this.modal.className="modal",this.modal.innerHTML='\n        <div class="modal-content">\n            <button type="button" class="close-btn" aria-label="Закрыть">\n                <svg class="icon" viewBox="0 -960 960 960">\n                    <path d="M256-213.847 213.847-256l224-224-224-224L256-746.153l224 224 224-224L746.153-704l-224 224 224 224L704-213.847l-224-224-224 224Z"/>\n                </svg>\n            </button>\n            <div class="modal-body"></div>\n        </div>\n    ',document.body.appendChild(this.modal),this.closeBtn=this.modal.querySelector(".close-btn"),this.modalBody=this.modal.querySelector(".modal-body"),this.closeBtn&&this.closeBtn.addEventListener("click",(()=>this.close()))}show(t){this.modal.classList.add("active"),this.modalBody.innerHTML=t}close(){this.modal.classList.remove("active"),setTimeout((()=>{this.modalBody.innerHTML=""}),300)}}class i{constructor(t){this.container=t,this.tickets=[],this.addEventListeners()}renderTickets(t){this.tickets=t,this.container.innerHTML=t.map((t=>this.createTicketHTML(t))).join("")}addEventListeners(){this.container.addEventListener("click",(t=>{const e=t.target.closest(".ticket");if(!e)return;const i=e.dataset.id,n=t.target.closest("button, .status-checkbox, label");n?n.classList.contains("edit-btn")?(t.preventDefault(),this.onEditClick?.(i)):n.classList.contains("delete-btn")?(t.preventDefault(),this.onDeleteClick?.(i)):(n.classList.contains("status-checkbox")||n.getAttribute("for")?.startsWith("status-"))&&this.onStatusChange?.(i):t.target.closest(".ticket-content")&&(t.preventDefault(),this.onTicketClick?.(i))}))}createTicketHTML(t){const e=t.status?'<path d="M382-240 154-468l57-57 171 171 367-367 57 57-424 424Z"/>':'<path d="M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h560q33 0 56.5 23.5T840-760v560q0 33-23.5 56.5T760-120H200Zm0-80h560v-560H200v560Z"/>';return`\n            <div class="ticket" data-id="${t.id}">\n                <div class="ticket-status">\n                    <input type="checkbox" \n                           class="status-checkbox" \n                           id="status-${t.id}" \n                           ${t.status?"checked":""}>\n                    <label for="status-${t.id}">\n                        <svg class="icon" viewBox="0 -960 960 960">\n                            ${e}\n                        </svg>\n                    </label>\n                </div>\n                <div class="ticket-content">\n                    <h3>${t.name}</h3>\n                    <p>Created: ${new Date(t.created).toLocaleString()}</p>\n                </div>\n                <div class="ticket-controls">\n                    <button class="edit-btn" title="Редактировать">\n                        <svg class="icon" viewBox="0 -960 960 960">\n                            <path d="M200-200h57l391-391-57-57-391 391v57Zm-80 80v-170l528-527q12-11 26.5-17t30.5-6q16 0 31 6t26 18l55 56q12 11 17.5 26t5.5 30q0 16-5.5 30.5T817-647L290-120H120Z"/>\n                        </svg>\n                    </button>\n                    <button class="delete-btn" title="Удалить">\n                        <svg class="icon" viewBox="0 -960 960 960">\n                            <path d="M280-120q-33 0-56.5-23.5T200-200v-520h-40v-80h200v-40h240v40h200v80h-40v520q0 33-23.5 56.5T680-120H280Z"/>\n                        </svg>\n                    </button>\n                </div>\n            </div>\n        `}}class n{constructor(){this.storageKey="helpdesk_state"}saveState(t){try{localStorage.setItem(this.storageKey,JSON.stringify(t))}catch(t){console.error("Failed to save state:",t)}}loadState(){try{const t=localStorage.getItem(this.storageKey);return t?JSON.parse(t):[]}catch(t){console.error("Error loading state:",t)}}clearState(){localStorage.removeItem(this.storageKey)}}(new class{constructor(){this.api=new t,this.modal=new e,this.ticketView=new i(document.querySelector(".container")),this.stateManager=new n,document.addEventListener("DOMContentLoaded",(()=>{this.addTicketBtn=document.querySelector(".add-ticket"),this.addTicketBtn?(this.registerEvents(),this.init()):console.error("Add ticket button not found")}))}async init(){try{const t=this.stateManager.loadState();t.length>0&&this.ticketView.renderTickets(t),await this.loadTickets()}catch(t){console.error("Error initializing app:",t)}}registerEvents(){this.addTicketBtn.addEventListener("click",(()=>this.showCreateTicketModal())),this.ticketView.onTicketClick=t=>this.showTicketDetails(t),this.ticketView.onEditClick=t=>this.showEditTicketModal(t),this.ticketView.onDeleteClick=t=>this.showDeleteConfirmation(t),this.ticketView.onStatusChange=t=>this.toggleTicketStatus(t)}async loadTickets(){try{this.showLoading();const t=await this.api.getAllTickets();this.ticketView.renderTickets(t),this.stateManager.saveState(t)}catch(t){console.error("Error loading tickets",t)}finally{this.hideLoading()}}showLoading(){if(document.querySelector(".loading"))return;const t=document.createElement("div");t.className="loading",t.innerHTML='\n            <div class="lds-grid">\n                <div></div><div></div><div></div>\n                <div></div><div></div><div></div>\n                <div></div><div></div><div></div>\n            </div>\n        ',document.body.appendChild(t)}hideLoading(){const t=document.querySelector(".loading");t&&t.remove()}showCreateTicketModal(){try{const t='\n                <form id="create-ticket-form" class="ticket-form">\n                    <h2>Создать тикет</h2>\n                    <input type="text" \n                        name="name" \n                        placeholder="Краткое описание" \n                        required \n                        autocomplete="off">\n                    <textarea name="description" \n                            placeholder="Подробное описание" \n                            required \n                            autocomplete="off"\n                            rows="3"\n                            style="resize: none; min-height: 100px;"\n                            ></textarea>\n                    <div class="form-buttons">\n                        <button type="submit">Создать</button>\n                        <button type="button" class="cancel-btn">Отмена</button>\n                    </div>\n                </form>\n            ';this.modal.show(t);const e=document.querySelector('textarea[name="description"]'),i=()=>{e.style.height="100px",e.style.height=e.scrollHeight+"px"};e.addEventListener("input",(()=>{i(),e.value=e.value.replace(/\n\s*\n/g,"\n")})),e.addEventListener("keydown",(t=>{"Enter"===t.key&&setTimeout(i,0)})),i();const n=document.getElementById("create-ticket-form"),s=async t=>{t.preventDefault();try{const e=new FormData(t.target);await this.createTicket({name:e.get("name"),description:e.get("description"),status:!1})}finally{n.removeEventListener("submit",s)}};n.addEventListener("submit",s),n.querySelector(".cancel-btn").addEventListener("click",(()=>{n.reset(),this.modal.close()}))}catch(t){console.error("Error in create modal:",t),this.modal.close()}}async createTicket(t){try{this.showLoading(),await this.api.createTicket(t),await this.loadTickets(),this.modal.close()}catch(t){console.error("Error creating ticket",t)}finally{this.hideLoading()}}async showTicketDetails(t){try{this.showLoading();const e=await this.api.getTicketById(t),i=`\n                <div class="ticket-details">\n                    <h2>${e.name}</h2>\n                    <p>${e.description}</p>\n                    <p>Status: ${e.status?"Done":"In Progress"}</p>\n                    <p>Created: ${new Date(e.created).toLocaleString()}</p>\n                </div>\n            `;this.modal.show(i)}catch(t){console.error("Error loading ticket details",t)}finally{this.hideLoading()}}async updateTicket(t,e){try{this.showLoading(),await this.api.updateTicket(t,e),await this.loadTickets(),this.modal.close()}catch(t){console.error("Error updating ticket",t)}finally{this.hideLoading()}}async showEditTicketModal(t){try{this.showLoading();const e=await this.api.getTicketById(t),i=`\n                <form id="edit-ticket-form" class="ticket-form">\n                    <h2>Редактировать тикет</h2>\n                    <input type="text" \n                        name="name" \n                        value="${e.name}" \n                        required \n                        autocomplete="off">\n                    <textarea name="description" \n                            required \n                            autocomplete="off"\n                            rows="3"\n                            style="resize: none; min-height: 100px;"\n                            >${e.description}</textarea>\n                    <div class="form-buttons">\n                        <button type="submit">Сохранить</button>\n                        <button type="button" class="cancel-btn">Отмена</button>\n                    </div>\n                </form>\n            `;this.modal.show(i);const n=document.querySelector('textarea[name="description"]'),s=()=>{n.style.height="100px",n.style.height=n.scrollHeight+"px"};n.addEventListener("input",(()=>{s(),n.value=n.value.replace(/\n\s*\n/g,"\n")})),n.addEventListener("keydown",(t=>{"Enter"===t.key&&setTimeout(s,0)})),s();const o=document.getElementById("edit-ticket-form"),a=async i=>{i.preventDefault();try{const n=new FormData(i.target);await this.updateTicket(t,{name:n.get("name"),description:n.get("description"),status:e.status})}finally{o.removeEventListener("submit",a)}};o.addEventListener("submit",a),o.querySelector(".cancel-btn").addEventListener("click",(()=>{o.reset(),this.modal.close()}))}catch(t){console.error("Error loading ticket for edit",t),this.modal.close()}finally{this.hideLoading()}}showDeleteConfirmation(t){try{const e='\n                <div class="delete-confirmation">\n                    <h2>Удалить тикет?</h2>\n                    <div class="modal-buttons">\n                        <button id="confirm-delete" class="danger-btn">Да</button>\n                        <button id="cancel-delete">Отмена</button>\n                    </div>\n                </div>\n            ';this.modal.show(e);const i=document.getElementById("confirm-delete"),n=document.getElementById("cancel-delete"),s=()=>{i?.removeEventListener("click",o),n?.removeEventListener("click",a)},o=async()=>{try{this.showLoading(),await this.deleteTicket(t),this.modal.close()}catch(t){console.error("Error deleting ticket:",t)}finally{this.hideLoading(),s()}},a=()=>{this.modal.close(),s()};i?.addEventListener("click",o),n?.addEventListener("click",a)}catch(t){console.error("Error in delete confirmation:",t),this.modal.close()}}async deleteTicket(t){try{this.showLoading(),await this.api.deleteTicket(t),await this.loadTickets(),this.modal.close()}catch(t){console.error("Error deleting ticket",t)}finally{this.hideLoading()}}async toggleTicketStatus(t){try{if(document.querySelector(".loading"))return;this.showLoading();const e=await this.api.getTicketById(t);if(!e)throw new Error("Ticket not found");await this.api.updateTicket(t,{...e,status:!e.status}),await this.loadTickets()}catch(t){console.error("Error updating ticket status",t)}finally{this.hideLoading()}}}).init()})();
//# sourceMappingURL=main.a4d5e3eeb0ea93bbc3c2.js.map