(()=>{"use strict";var t={p:"/ahj-homeworks/media/"};const e=t.p+"assets/play-arrow.svg",s=t.p+"assets/pause.svg";class i{constructor(t){this.type=t.type,this.content=t.content,this.coords=t.coords,this.timestamp=t.timestamp,this.volumes=t.volumes,this.duration=0}render(){const t=document.createElement("div");return t.className="post",t.innerHTML=`\n      <div class="post-content">\n        ${this.renderContent()}\n      </div>\n      <div class="post-footer">\n        <div class="post-coords">[${this.coords.lat}, ${this.coords.lng}]</div>\n        <div class="post-time">${this.formatDate()}</div>\n      </div>\n    `,"audio"===this.type?this.initAudioHandlers(t):"video"===this.type&&this.initVideoHandlers(t),t}initAudioHandlers(t){const e=t.querySelector("audio"),s=t.querySelector(".play-button"),i=t.querySelector(".waveform"),o=t.querySelector(".duration");e&&s&&i&&(s.addEventListener("click",(()=>this.togglePlay(e,s))),e.addEventListener("timeupdate",(()=>{const t=i.querySelectorAll(".waveform-bar"),s=Math.floor(e.currentTime/e.duration*t.length);t.forEach(((t,e)=>{e<s?t.classList.add("active"):t.classList.remove("active")}))})),e.addEventListener("loadedmetadata",(()=>{this.setDuration(e,o)})))}renderContent(){switch(this.type){case"text":return`<p>${this.content}</p>`;case"audio":return`\n            <div class="audio-post">\n                <button class="play-button">\n                    <img src="${e}" alt="Play" class="play-icon">\n                </button>\n                <div class="audio-wrapper">\n                    <div class="audio-progress">\n                        <div class="progress-bar"></div>\n                    </div>\n                    <span class="duration">00:00</span>\n                    <audio src="${this.content}" preload="metadata"></audio>\n                </div>\n            </div>\n        `;case"video":return`\n          <div class="video-post">\n            <div class="video-wrapper">\n              ${this.content?`<video src="${this.content}" class="video-player" preload="metadata" controls></video>`:'<div class="video-placeholder">\n                  <span>Видео недоступно</span>\n                </div>'}\n            </div>\n          </div>\n        `;default:return""}}initAudioHandlers(t){const e=t.querySelector("audio"),s=t.querySelector(".play-button"),i=t.querySelector(".progress-bar"),o=t.querySelector(".duration");if(!e||!s||!i)return;const n=()=>{o.textContent=this.formatTime(e.duration),i.style.width="0%",e.removeEventListener("canplaythrough",n)};e.addEventListener("canplaythrough",n),e.addEventListener("loadedmetadata",n),s.addEventListener("click",(()=>this.togglePlay(e,s))),e.addEventListener("timeupdate",(()=>{const t=e.currentTime/e.duration*100;i.style.width=`${t}%`,o.textContent=this.formatTime(e.currentTime)})),e.load()}initVideoHandlers(t){const e=t.querySelector("video"),s=t.querySelector(".video-wrapper");if(!e)return;const i=()=>{const t=s.offsetWidth;e.width=t,e.height=t*(9/16)};e.addEventListener("loadedmetadata",(()=>{i()})),window.addEventListener("resize",i),e.load()}togglePlay(t,i){const o=i.querySelector(".play-icon");t.paused?(t.play(),o.src=s):(t.pause(),o.src=e)}updateProgress(t,e,s){const i=t.currentTime/t.duration*100;e.style.width=`${i}%`,s.textContent=this.formatTime(t.currentTime)}setDuration(t,e){e.textContent=this.formatTime(t.duration)}formatTime(t){if(!t||isNaN(t)||!isFinite(t))return"00:00";const e=Math.floor(t/60),s=Math.floor(t%60);return`${e.toString().padStart(2,"0")}:${s.toString().padStart(2,"0")}`}formatDate(){return new Date(this.timestamp).toLocaleString()}}class o{static parse(t){const e=(t=(t=t.replace(/[\[\]]/g,"")).replace(/[\u2212\u2013\u2014]/g,"-")).split(",").map((t=>t.trim()));if(2!==e.length)throw new Error("Invalid coordinates format");const s=parseFloat(e[0]),i=parseFloat(e[1]);if(isNaN(s)||isNaN(i))throw new Error("Coordinates must be numbers");if(s<-90||s>90||i<-180||i>180)throw new Error("Координаты вне допустимого диапазона");return{lat:s,lng:i}}}class n{constructor(t){this.onSubmit=t,this.init()}init(){this.createModal(),this.registerEvents()}createModal(){this.element=document.createElement("div"),this.element.className="modal",this.element.innerHTML='\n          <div class="modal-content">\n            <h3>Укажите координаты</h3>\n            <div class="modal-body">\n              <input type="text" \n                    class="coords-input"\n                    placeholder="Например: 51.50851, -0.12572">\n              <div class="error-message hidden"></div>\n            </div>\n            <div class="modal-footer">\n              <button type="button" class="submit-btn">Сохранить</button>\n              <button type="button" class="cancel-btn">Отмена</button>\n            </div>\n          </div>\n        ',this.input=this.element.querySelector(".coords-input"),this.error=this.element.querySelector(".error-message")}registerEvents(){const t=this.element.querySelector(".submit-btn"),e=this.element.querySelector(".cancel-btn");t.addEventListener("click",(()=>this.submit())),e.addEventListener("click",(()=>this.close())),this.input.addEventListener("keypress",(t=>{"Enter"===t.key&&(t.preventDefault(),this.submit())}))}show(){document.body.appendChild(this.element),this.input.focus()}close(){this.element&&this.element.parentNode&&this.element.parentNode.removeChild(this.element)}showError(t){this.error.textContent=t,this.error.classList.remove("hidden")}hideError(){this.error.classList.add("hidden"),this.input.classList.remove("error")}submit(){try{const t=this.parseCoordinates(this.input.value);this.hideError(),this.onSubmit(t),this.close()}catch(t){this.showError(t.message)}}parseCoordinates(t){return o.parse(t)}}const r=t.p+"assets/microphone.svg",a=t.p+"assets/send.svg",d=t.p+"assets/close.svg";class c{constructor(t){this.container=t,this.timeline=t?.closest(".timeline-input")||null,this.mediaRecorder=null,this.audioChunks=[],this.isRecording=!1,this.timer=0,this.timerInterval=null,this.onComplete=null,this.onStart=null,this.onStop=null,this.init()}init(){this.controls=document.createElement("div"),this.controls.className="audio-controls",this.createControls(),this.initElements(),this.registerEvents()}createControls(){this.controls.innerHTML=`\n            <button class="mic-button">\n                <img src="${r}" alt="Record">\n            </button>\n            <div class="recording-controls hidden">\n                <button class="ok-button">\n                    <img src="${a}" alt="Send">\n                </button>\n                <span class="timer">00:00</span>\n                <button class="cancel-button">\n                    <img src="${d}" alt="Cancel">\n                </button>\n            </div>\n        `}initElements(){this.micButton=this.controls.querySelector(".mic-button"),this.recordingControls=this.controls.querySelector(".recording-controls"),this.okButton=this.controls.querySelector(".ok-button"),this.cancelButton=this.controls.querySelector(".cancel-button"),this.timerDisplay=this.controls.querySelector(".timer")}async startRecording(){try{const t=await navigator.mediaDevices.getUserMedia({audio:!0});this.mediaRecorder=new MediaRecorder(t),this.audioChunks=[],this.mediaRecorder.ondataavailable=t=>{this.audioChunks.push(t.data)},this.mediaRecorder.start(),this.isRecording=!0,this.showRecordingControls(),this.startTimer(),this.timeline&&this.timeline.classList.add("recording"),this.onStart&&this.onStart()}catch(t){console.error("Ошибка доступа к микрофону:",t)}}recordVolumes(){if(!this.isRecording)return;this.analyser.getByteFrequencyData(this.dataArray);const t=Math.max(...Array.from(this.dataArray))/255;this.volumes.push(t),requestAnimationFrame((()=>this.recordVolumes()))}showError(t){console.error(t)}stopRecording(){if(this.mediaRecorder&&this.isRecording)return this.mediaRecorder.stop(),this.isRecording=!1,this.stopTimer(),this.hideRecordingControls(),this.timeline&&this.timeline.classList.remove("recording"),this.onStop&&this.onStop(),new Promise((t=>{this.mediaRecorder.onstop=()=>{const e=new Blob(this.audioChunks,{type:"audio/webm"});this.onComplete&&this.onComplete(e),t(e)}}))}startTimer(){this.timer=0,this.timerInterval=setInterval((()=>{this.timer++,this.updateTimerDisplay()}),1e3)}stopTimer(){clearInterval(this.timerInterval)}updateTimerDisplay(){const t=Math.floor(this.timer/60),e=this.timer%60;this.timerDisplay.textContent=`${t.toString().padStart(2,"0")}:${e.toString().padStart(2,"0")}`}showRecordingControls(){this.micButton.classList.add("hidden"),this.recordingControls.classList.remove("hidden")}hideRecordingControls(){this.micButton.classList.remove("hidden"),this.recordingControls.classList.add("hidden")}registerEvents(){this.micButton.addEventListener("click",(()=>this.startRecording())),this.okButton.addEventListener("click",(async()=>{await this.stopRecording()})),this.cancelButton.addEventListener("click",(()=>{this.stopRecording(),this.audioChunks=[]}))}cleanup(){this.mediaRecorder&&this.mediaRecorder.stream&&this.mediaRecorder.stream.getTracks().forEach((t=>t.stop())),this.stopTimer(),this.controls&&this.controls.parentNode&&this.controls.parentNode.removeChild(this.controls)}disable(){this.controls.classList.add("disabled"),this.controls.querySelector(".mic-button").disabled=!0}enable(){this.controls.classList.remove("disabled"),this.controls.querySelector(".mic-button").disabled=!1}}const l=t.p+"assets/videocam.svg";class h{constructor(t){this.container=t,this.timeline=t?.closest(".timeline-input")||null,this.mediaRecorder=null,this.videoChunks=[],this.isRecording=!1,this.timer=0,this.timerInterval=null,this.onComplete=null,this.onStart=null,this.onStop=null,this.init()}init(){this.controls=document.createElement("div"),this.controls.className="video-controls",this.createControls(),this.initElements(),this.registerEvents()}createControls(){this.controls.innerHTML=`\n            <button class="video-button">\n                <img src="${l}" alt="Record Video">\n            </button>\n            <div class="recording-controls hidden">\n                <button class="ok-button">\n                    <img src="${a}" alt="Send">\n                </button>\n                <span class="timer">00:00</span>\n                <button class="cancel-button">\n                    <img src="${d}" alt="Cancel">\n                </button>\n            </div>\n        `}async startRecording(){try{const t=await navigator.mediaDevices.getUserMedia({audio:!0,video:!0});this.mediaRecorder=new MediaRecorder(t),this.videoChunks=[],this.mediaRecorder.ondataavailable=t=>{this.videoChunks.push(t.data)},this.mediaRecorder.start(),this.isRecording=!0,this.showRecordingControls(),this.startTimer(),this.timeline&&this.timeline.classList.add("recording"),this.onStart&&this.onStart()}catch(t){console.error("Ошибка доступа к камере:",t)}}stopRecording(){if(this.mediaRecorder&&this.isRecording)return this.mediaRecorder.stop(),this.isRecording=!1,this.stopTimer(),this.hideRecordingControls(),this.timeline&&this.timeline.classList.remove("recording"),this.onStop&&this.onStop(),new Promise((t=>{this.mediaRecorder.onstop=()=>{const e=new Blob(this.videoChunks,{type:"video/webm"});t(e)}}))}startTimer(){this.timer=0,this.timerInterval=setInterval((()=>{this.timer++,this.updateTimerDisplay()}),1e3)}stopTimer(){clearInterval(this.timerInterval)}updateTimerDisplay(){const t=Math.floor(this.timer/60),e=this.timer%60;this.timerDisplay.textContent=`${t.toString().padStart(2,"0")}:${e.toString().padStart(2,"0")}`}initElements(){this.videoButton=this.controls.querySelector(".video-button"),this.recordingControls=this.controls.querySelector(".recording-controls"),this.okButton=this.controls.querySelector(".ok-button"),this.cancelButton=this.controls.querySelector(".cancel-button"),this.timerDisplay=this.controls.querySelector(".timer")}showRecordingControls(){this.videoButton.classList.add("hidden"),this.recordingControls.classList.remove("hidden")}hideRecordingControls(){this.videoButton.classList.remove("hidden"),this.recordingControls.classList.add("hidden")}registerEvents(){this.videoButton.addEventListener("click",(()=>this.startRecording())),this.okButton.addEventListener("click",(async()=>{const t=await this.stopRecording();t&&this.onComplete(t)})),this.cancelButton.addEventListener("click",(()=>{this.stopRecording(),this.videoChunks=[]}))}cleanup(){this.mediaRecorder&&this.mediaRecorder.stream&&this.mediaRecorder.stream.getTracks().forEach((t=>t.stop())),this.stopTimer(),this.controls&&this.controls.parentNode&&this.controls.parentNode.removeChild(this.controls)}disable(){this.controls.classList.add("disabled"),this.controls.querySelector(".video-button").disabled=!0}enable(){this.controls.classList.remove("disabled"),this.controls.querySelector(".video-button").disabled=!1}}class u{constructor(t){this.container=t,this.posts=[],this.savedCoords=null,this.init()}init(){this.bindToDOM(),this.registerEvents()}registerEvents(){this.input.addEventListener("keypress",(async t=>{"Enter"===t.key&&t.target.value.trim()&&(await this.createPost(t.target.value),t.target.value="")})),this.sendButton.addEventListener("click",(async()=>{this.input.value.trim()&&(await this.createPost(this.input.value),this.input.value="")}))}bindToDOM(){this.container.innerHTML=`\n      <div class="timeline">\n        <div class="timeline-posts"></div>\n        <div class="timeline-input">\n          <div class="input-container">\n            <input type="text" placeholder="Введите текст...">\n            <button class="send-button">\n              <img src="${a}" alt="Send" class="send-icon">\n            </button>\n          </div>\n          <div class="media-controls"></div>\n        </div>\n      </div>\n    `,this.postsContainer=this.container.querySelector(".timeline-posts"),this.input=this.container.querySelector("input"),this.sendButton=this.container.querySelector(".send-button"),this.mediaControls=this.container.querySelector(".media-controls");const t=this.container.querySelector(".audio-controls"),e=this.container.querySelector(".video-controls");this.audioRecorder=new c(t),this.videoRecorder=new h(e),this.isRecording=!1,this.audioRecorder.onComplete=t=>{const e=URL.createObjectURL(t);this.createPost(e,"audio")},this.videoRecorder.onComplete=t=>{const e=URL.createObjectURL(t);this.createPost(e,"video")},this.mediaControls.appendChild(this.audioRecorder.controls),this.mediaControls.appendChild(this.videoRecorder.controls),this.audioRecorder.onStart=()=>{this.isRecording||(this.isRecording=!0,this.videoRecorder.disable())},this.audioRecorder.onStop=()=>{this.isRecording=!1,this.videoRecorder.enable()},this.videoRecorder.onStart=()=>{this.isRecording||(this.isRecording=!0,this.audioRecorder.disable())},this.videoRecorder.onStop=()=>{this.isRecording=!1,this.audioRecorder.enable()},this.sendButton.addEventListener("click",(()=>{this.input.value.trim()&&(this.createPost(this.input.value,"text"),this.input.value="")}))}async createPost(t,e="text",s=null){try{let s=this.savedCoords;if(!s)try{s=await this.getCurrentPosition(),this.savedCoords=s}catch(t){return void(document.querySelector(".modal")||this.showLocationModal())}const i={type:e,content:t,coords:s,timestamp:new Date};this.addPost(i)}catch(t){console.error(t)}}showLocationModal(){new n((t=>{this.savedCoords=t,localStorage.setItem("savedCoords",JSON.stringify(t)),this.createPost(this.input.value,t)})).show()}getCurrentPosition(){return new Promise(((t,e)=>{if(!navigator.geolocation)return this.showLocationModal(),void e(new Error("Геолокация недоступна"));navigator.geolocation.getCurrentPosition((e=>{t({lat:e.coords.latitude,lng:e.coords.longitude})}),(t=>{e(new Error("Не удалось получить координаты"))}))}))}addPost(t){const e=new i(t);this.posts.unshift(e),this.renderPosts()}renderPosts(){this.postsContainer.innerHTML="",this.posts.forEach((t=>{this.postsContainer.appendChild(t.render())}))}destroy(){this.audioRecorder&&this.audioRecorder.cleanup(),this.videoRecorder&&this.videoRecorder.cleanup()}}class m{constructor(){this.container=document.querySelector("#timeline"),this.init()}init(){this.timeline=new u(this.container);const t=localStorage.getItem("savedCoords");t&&(this.timeline.savedCoords=JSON.parse(t)),this.loadInitialPosts()}async handleNewPost(t){try{const e=await this.getLocation();this.createPost(t,e)}catch(e){this.showLocationModal(t)}}getLocation(){return new Promise(((t,e)=>{navigator.geolocation?navigator.geolocation.getCurrentPosition((e=>{t({lat:e.coords.latitude,lng:e.coords.longitude})}),(t=>e(t))):e(new Error("Геолокация не поддерживается"))}))}showLocationModal(t){new n((e=>{this.createPost(t,e)})).show()}createPost(t,e){const s=new i({type:"text",content:t,coords:e,timestamp:new Date});this.timeline.addPost(s)}loadInitialPosts(){[{type:"text",content:"Пример текстового поста",coords:{lat:51.50851,lng:-.12572},timestamp:new Date}].forEach((t=>{const e=new i(t);this.timeline.addPost(e)}))}}document.addEventListener("DOMContentLoaded",(()=>{new m}))})();
//# sourceMappingURL=main.4e48780ae3266eee94a9.js.map