{"version":3,"file":"main.c443e3b454fa880f531f.js","mappings":"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","sources":["webpack://goblin-game/./src/js/Board.js","webpack://goblin-game/./src/js/sprite2D.js","webpack://goblin-game/./src/js/cursors.js","webpack://goblin-game/./src/js/Modal.js","webpack://goblin-game/./src/js/app.js","webpack://goblin-game/./src/js/gamePlay.js"],"sourcesContent":["export default class Board {\n  constructor(boardEl) {\n    this.board = null;\n    this.boardEl = boardEl;\n  }\n\n  initBoard(size) {\n    const arr = [];\n    let element = '';\n\n    for (let i = 0; i < size; i++) {\n      arr.push([]);\n\n      for (let j = 0; j < size; j++) {\n        arr[i].push(element);\n      }\n    }\n\n    this.board = arr;\n    this.renderBoard(this.board);\n  }\n\n  renderBoard(board) {\n    if (!this.boardEl) {\n      throw new Error('boardEl is not defined');\n    }\n\n    const fields = [];\n    for (const [i, row] of board.entries()) {\n      for (const [j, value] of row.entries()) {\n        fields.push(`\n          <div class=\"field\" \n            data-row=\"${i}\" \n            data-col=\"${j}\"\n            style=\"grid-row:${i + 1};grid-column:${j + 1};\">\n            ${value || ''}\n          </div>\n        `);\n      }\n    }\n    this.boardEl.innerHTML = fields.join('');\n  }\n}","export default class Sprite {\n  constructor(boardEl) {\n    this.sprite = 'sprite';\n    this.positionSprite = -1;\n    this.boardEl = boardEl;\n  }\n\n  randomPositionSprite(size) {\n    const divs = this.boardEl.querySelectorAll('.field');\n\n    const randomInt = Math.floor(Math.random() * (size ** 2));\n    if (this.positionSprite >= 0) {\n      divs[this.positionSprite].classList.remove(this.sprite);\n      this.positionSprite = -1;\n    }\n\n    divs[randomInt].classList.add(this.sprite);\n    this.positionSprite = randomInt;\n  }\n}","const hammerSVG = `\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"90\" height=\"90\" viewBox=\"0 0 512 512\">\n  <path fill=\"#EE8700\" d=\"M299.3 164.6l6.6 323c0.2 9.2-7.2 16.7-16.4 16.7h-62.1c-9.2 0-16.6-7.5-16.4-16.7l6.6-323 2.6-129.2 0.2-11.7c0.2-8.9 7.5-16 16.4-16h43.2c8.9 0 16.2 7.1 16.4 16l0.2 11.7 2.7 129.2z\"/>\n  <path fill=\"#3E3B43\" d=\"M392 160c0 2.5-2 4.5-4.5 4.5H299h-84h-70.3c-1.2 0-2.4-0.5-3.3-1.4l-47-50c-7-7.4-7-19 0-26.5l47-50c0.9-0.9 2-1.4 3.3-1.4h75.4h76.4h90.8c2.5 0 4.5 2 4.5 4.5V160z\"/>\n</svg>\n`;\n\nconst cursors = {\n  auto: 'auto',\n  hammer: `url(\"data:image/svg+xml;charset=utf8,${encodeURIComponent(hammerSVG)}\") 45 45, pointer`,\n};\n\nexport default cursors;","export default class Modal {\n  constructor(modalEl) {\n    this.modalEl = modalEl;\n  }\n\n  show(message) {\n    this.modalEl.querySelector('h2').textContent = message;\n    this.modalEl.classList.remove('hidden');\n  }\n\n  hide() {\n    this.modalEl.classList.add('hidden');\n  }\n}","import '../css/style.css';\nimport GamePlay from './gamePlay.js';\n\nconst boardEl = document.getElementById('board');\nconst modalEl = document.getElementById('modal');\nconst deadEl = document.getElementById('dead');\nconst lostEl = document.getElementById('lost');\n\nif (!boardEl || !modalEl || !deadEl || !lostEl) {\n  throw new Error('One or more elements are not defined in app.js');\n}\n\nconst gamePlay = new GamePlay(boardEl, modalEl, deadEl, lostEl);\ngamePlay.startGame();","import GameBoard from './Board.js';\nimport Sprite from './sprite2D.js';\nimport cursors from './cursors.js';\nimport Modal from './Modal.js';\n\nexport default class GamePlay {\n  constructor(boardEl, modalEl, deadEl, lostEl) {\n    this.size = 4;\n    this.boardEl = boardEl;\n    this.modalEl = modalEl;\n    this.countDead = deadEl;\n    this.countLost = lostEl;\n    this.count = null;\n  }\n\n  startGame() {\n    if (!this.boardEl || !this.modalEl || !this.countDead || !this.countLost) {\n      throw new Error('One or more elements are not defined');\n    }\n\n    const board = new GameBoard(this.boardEl);\n    board.initBoard(this.size);\n\n    const sprite = new Sprite(this.boardEl);\n    const modal = new Modal(this.modalEl);\n\n    this.onCellClick(sprite);\n    this.onButtonClick(modal);\n\n    this.gameInterval = setInterval(() => {\n      sprite.randomPositionSprite(this.size);\n\n      this.countLost.textContent = +this.countLost.textContent + this.count;\n\n      if (this.count !== 1) {\n        setTimeout(() => {\n          this.count = 1;\n        }, 1000);\n      }\n\n      this.checkWinner();\n    }, 1000);\n  }\n\n  setCursor(cursor) {\n    const board = document.getElementById('board');\n    if (board) {\n      if (cursor === cursors.hammer) {\n        board.classList.add('hammer-cursor');\n      } else {\n        board.classList.remove('hammer-cursor');\n      }\n    }\n  }\n\n  onCellClick() {\n    const fields = document.querySelectorAll('.field');\n\n    for (let i = 0; i < fields.length; i++) {\n      fields[i].addEventListener('click', () => {\n        if (fields[i].classList.contains('sprite')) {\n          fields[i].classList.remove('sprite');\n          this.countDead.textContent = +this.countDead.textContent + 1;\n\n          this.setCursor(cursors.hammer);\n\n          fields[i].classList.add('hit');\n          setTimeout(() => {\n            fields[i].classList.remove('hit');\n          }, 200);\n\n\n        } else {\n          this.countLost.textContent = +this.countLost.textContent + 1;\n        }\n        this.checkWinner();\n        this.count = 0;\n      });\n    }\n  }\n\n  onButtonClick() {\n    const resetButtons = document.querySelectorAll('.reset');\n\n    for (const btn of resetButtons) {\n      btn.addEventListener('click', () => {\n        if (!this.modalEl.classList.contains('hidden')) {\n          this.modalEl.classList.add('hidden');\n        }\n        this.reset();\n        this.startGame();\n      });\n    }\n  }\n\n  reset() {\n    this.countDead.textContent = 0;\n    this.countLost.textContent = 0;\n    clearInterval(this.gameInterval);\n  }\n\n  checkWinner() {\n    if (this.countDead.textContent == 5) {\n      this.showWinner('🍾 Победа! 🍾');\n    }\n\n    if (this.countLost.textContent > 5) {\n      this.showWinner('Вы проиграли!');\n    }\n  }\n\n  showWinner(status) {\n    const header = this.modalEl.querySelector('h2');\n    header.textContent = status;\n    this.modalEl.classList.remove('hidden');\n    clearInterval(this.gameInterval);\n    this.reset();\n  }\n}\n"],"names":["Board","constructor","boardEl","this","board","initBoard","size","arr","i","push","j","renderBoard","Error","fields","row","entries","value","innerHTML","join","Sprite","sprite","positionSprite","randomPositionSprite","divs","querySelectorAll","randomInt","Math","floor","random","classList","remove","add","auto","hammer","encodeURIComponent","Modal","modalEl","show","message","querySelector","textContent","hide","document","getElementById","deadEl","lostEl","gamePlay","countDead","countLost","count","startGame","GameBoard","modal","onCellClick","onButtonClick","gameInterval","setInterval","setTimeout","checkWinner","setCursor","cursor","cursors","length","addEventListener","contains","resetButtons","btn","reset","clearInterval","showWinner","status"],"sourceRoot":""}